var N = null;var searchIndex = {};
searchIndex["unicode_segmentation"]={"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",N,N],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",N,N],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",N,N],[3,"UWordBounds","","External iterator for a string's word boundaries.",N,N],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",N,N],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",N,N],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",N,N],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,N],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,N],[11,"clone","","",1,[[["self"]],["graphemeindices"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,[[["self"]],["str"]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"clone","","",2,[[["self"]],["graphemes"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,[[["self"]],["str"]]],[11,"size_hint","","",2,N],[11,"next","","",2,[[["self"]],["option",["str"]]]],[11,"next_back","","",2,[[["self"]],["option",["str"]]]],[11,"clone","","",3,[[["self"]],["graphemecursor"]]],[11,"eq","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"ne","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,[[["usize"],["usize"],["bool"]],["graphemecursor"]]],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,[[["self"],["usize"]]]],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,[[["self"]],["usize"]]],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,[[["self"],["str"],["usize"]]]],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,[[["self"],["str"],["usize"]],["result",["bool","graphemeincomplete"]]]],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"next","","",4,[[["self"]],["option",["str"]]]],[11,"next_back","","",4,[[["self"]],["option",["str"]]]],[11,"clone","","",5,[[["self"]],["uwordbounds"]]],[11,"clone","","",6,[[["self"]],["uwordboundindices"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,[[["self"]],["str"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next","","",5,[[["self"]],["option",["str"]]]],[11,"next_back","","",5,[[["self"]],["option",["str"]]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,[[["self"]],["str"]]],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",N,N],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",N,N],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,[[["self"],["bool"]],["graphemes"]]],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,[[["self"],["bool"]],["graphemeindices"]]],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,[[["self"]],["unicodewords"]]],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,[[["self"]],["uwordbounds"]]],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,[[["self"]],["uwordboundindices"]]]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["voca_rs"]={"doc":"","items":[[0,"case","voca_rs","Converts the `subject` to a selected case.",N,N],[5,"camel_case","voca_rs::case","Converts the `subject` to camel case.",N,[[["str"]],["string"]]],[5,"capitalize","","Converts the first character of `subject` to upper case. If `restToLower` is `true`, convert the rest of `subject` to lower case.",N,[[["str"],["bool"]],["string"]]],[5,"decapitalize","","Converts the first character of `subject` to lower case. If `restToLower` is `true`, convert the rest of `subject` to lower case.",N,[[["str"],["bool"]],["string"]]],[5,"kebab_case","","Converts the `subject` to kebab case.",N,[[["str"]],["string"]]],[5,"shouty_kebab_case","","Converts the `subject` to SHOUTY kebab case.",N,[[["str"]],["string"]]],[5,"lower_case","","Converts the `subject` to lower case.",N,[[["str"]],["string"]]],[5,"pascal_case","","Converts the `subject` to pascal case.",N,[[["str"]],["string"]]],[5,"snake_case","","Converts the `subject` to snake case.",N,[[["str"]],["string"]]],[5,"shouty_snake_case","","Converts the `subject` to SHOUTY snake case.",N,[[["str"]],["string"]]],[5,"swap_case","","Converts the uppercase alpha caracters of `subject` to lowercase and lowercase characters to uppercase.",N,[[["str"]],["string"]]],[5,"title_case","","Converts the `subject` to title case.",N,[[["str"]],["string"]]],[5,"upper_case","","Converts the `subject` to upper case.",N,[[["str"]],["string"]]],[0,"chop","voca_rs","Extracts a character(s) from `subject`.",N,N],[5,"char_at","voca_rs::chop","Access a character from `subject` at specified `position`.",N,[[["str"],["usize"]],["string"]]],[5,"first","","Extracts the first `length` characters from `subject`.",N,[[["str"],["usize"]],["string"]]],[5,"grapheme_at","","Get a grapheme from `subject` at specified `position`.",N,[[["str"],["usize"]],["string"]]],[5,"last","","Extracts the last `length` characters from `subject`.",N,[[["str"],["usize"]],["string"]]],[5,"prune","","Truncates `subject` to a new `length` and does not break the words. Guarantees that the truncated string is no longer than `length`.",N,[[["str"],["usize"],["str"]],["string"]]],[5,"slice","","Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not included.",N,[[["str"],["isize"],["isize"]],["string"]]],[5,"substr","","Extracts from `subject` a string from `start` position a number of `length` characters.",N,[[["str"],["usize"],["usize"]],["string"]]],[5,"substring","","Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not included.",N,[[["str"],["usize"],["usize"]],["string"]]],[5,"truncate","","Truncates `subject` to a new `length`.",N,[[["str"],["usize"],["str"]],["string"]]],[0,"count","voca_rs","Counts the characters in `subject`.",N,N],[5,"count","voca_rs::count","Counts the characters in `subject`.",N,[[["str"]],["usize"]]],[5,"count_graphemes","","Counts the graphemes in `subject` taking care of surrogate pairs and combining marks.",N,[[["str"]],["usize"]]],[5,"count_substrings","","Counts the number of `substring` appearances in `subject`.",N,[[["str"],["str"]],["usize"]]],[5,"count_words","","Counts the number of words in `subject`.",N,[[["str"],["str"]],["usize"]]],[0,"escape","voca_rs","Escapes  special characters in `subject`.",N,N],[5,"escape_html","voca_rs::escape","Escapes HTML special characters < > & ' \" `in`subject`.",N,[[["str"]],["string"]]],[5,"escape_regexp","","Escapes the regular expression special characters - [ ] / { } ( ) * + ? . \\ ^ $ | in `subject`.",N,[[["str"]],["string"]]],[5,"unescape_html","","Unescapes HTML special characters from < > & \" ' ` to corresponding < > & \" ' `in`subject`.",N,[[["str"]],["string"]]],[0,"index","voca_rs","Returns the index of `search` in `subject`.",N,N],[5,"index_of","voca_rs::index","Returns the first occurrence index of `search` in `subject` or -1 if not found.",N,[[["str"],["str"],["usize"]],["i8"]]],[5,"last_index_of","","Returns the last occurrence index of `search` in `subject` or -1 if not found.",N,[[["str"],["str"],["usize"]],["i8"]]],[0,"manipulate","voca_rs","Manipulate with the `subject`.",N,N],[5,"insert","voca_rs::manipulate","Inserts into `subject` a string `to_insert` at specified `position`.",N,[[["str"],["str"],["usize"]],["string"]]],[5,"pad","","Pads `subject` to a new `length`.",N,[[["str"],["usize"],["str"]],["string"]]],[5,"pad_left","","Pads `subject` from left to a new `length`.",N,[[["str"],["usize"],["str"]],["string"]]],[5,"pad_right","","Pads `subject` from right to a new `length`.",N,[[["str"],["usize"],["str"]],["string"]]],[5,"repeat","","Repeats the `subject` number of `times`.",N,[[["str"],["usize"]],["string"]]],[5,"replace","","Replaces the matches of `pattern` with `replacement`.",N,[[["str"],["str"],["str"]],["string"]]],[5,"replace_all","","Replaces all matches of `pattern` with `replacement`.",N,[[["str"],["str"],["str"]],["string"]]],[5,"reverse","","Reverses the `subject`.",N,[[["str"]],["string"]]],[5,"reverse_grapheme","","Reverses the `subject` taking care of surrogate pairs and combining marks.",N,[[["str"]],["string"]]],[5,"splice","","Changes `subject` by deleting `delete_count` of characters starting at position `start`. Places a new string `to_add` instead of deleted characters.",N,[[["str"],["isize"],["usize"],["str"]],["string"]]],[5,"trim","","Removes whitespaces from left and right sides of the `subject`.",N,[[["str"],["str"]],["string"]]],[5,"trim_left","","Removes whitespaces from the left side of the `subject`.",N,[[["str"],["str"]],["string"]]],[5,"trim_right","","Removes whitespaces from the right side of the `subject`.",N,[[["str"],["str"]],["string"]]],[0,"query","voca_rs","Checks a `subject` against a query.",N,N],[5,"ends_with","voca_rs::query","Checks whether `subject` ends with `end`.",N,[[["str"],["str"]],["bool"]]],[5,"includes","","Checks whether `subject` includes `search` starting from `position`.",N,[[["str"],["str"],["usize"]],["bool"]]],[5,"is_alpha","","Checks whether `subject` contains only alpha characters.",N,[[["str"]],["bool"]]],[5,"is_alphadigit","","Checks whether `subject` contains contains only alpha and digit characters.",N,[[["str"]],["bool"]]],[5,"is_blank","","Checks whether `subject` is empty or contains only whitespaces.",N,[[["str"]],["bool"]]],[5,"is_digit","","Checks whether `subject` contains only digit characters.",N,[[["str"]],["bool"]]],[5,"is_empty","","Checks whether `subject` is empty.",N,[[["str"]],["bool"]]],[5,"is_lowercase","","Checks whether `subject` has only lower case characters.",N,[[["str"]],["bool"]]],[5,"is_numeric","","Checks whether `subject` is numeric.",N,[[["str"]],["bool"]]],[5,"is_uppercase","","Checks whether `subject` has only upper case characters.",N,[[["str"]],["bool"]]],[5,"starts_with","","Checks whether `subject` starts with `start`.",N,[[["str"],["str"]],["bool"]]],[0,"split","voca_rs","Splits `subject` into an chuncks according to given rules.",N,N],[5,"chars","voca_rs::split","Splits `subject` into an array of characters.",N,[[["str"]],["vec",["str"]]]],[5,"split","","Splits `subject` into an array of chunks by `separator`.",N,[[["str"],["str"]],["vec",["str"]]]],[5,"words","","Splits `subject` into an array of words.",N,[[["str"]],["vec",["string"]]]],[5,"graphemes","","Splits `subject` into an array of graphemes",N,[[["str"]],["vec",["str"]]]],[0,"strip","voca_rs","Strips specific characters from subject.",N,N],[5,"strip_bom","voca_rs::strip","Strips the byte order mark (BOM) from the beginning of `subject`.",N,[[["str"]],["string"]]],[0,"utils","voca_rs","Utility functions and properties.",N,N],[17,"VERSION","voca_rs::utils","A property that contains the library semantic version number.",N,N],[17,"ASCII_LETTERS","","The concatenation of the `ascii_lowercase` and `ascii_uppercase` constants described below. This value is not locale-dependent.",N,N],[17,"ASCII_LOWERCASE","","The lowercase letters `\"abcdefghijklmnopqrstuvwxyz\"`. This value is not locale-dependent and will not change.",N,N],[17,"ASCII_UPPERCASE","","The uppercase letters `\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"`. This value is not locale-dependent and will not change.",N,N],[17,"DIGITS","","The string \"0123456789\".",N,N],[17,"HEXDIGITS","","The string `\"0123456789abcdefABCDEF\"`.",N,N],[17,"OCTDIGITS","","The string `\"01234567\"`.",N,N],[17,"PUNCTUATION","","The string `!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~`.",N,N],[17,"PRINTABLE","","String of ASCII characters which are considered printable. This is a combination of `digits`, `ascii_letters`, `punctuation`, and `whitespace`.",N,N],[17,"WHITESPACE","","The string `\" \\t\\n\\r\"`.",N,N]],"paths":[]};
initSearch(searchIndex);
